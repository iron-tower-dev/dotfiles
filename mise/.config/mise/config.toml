# Mise Configuration
# Modern tool version manager configuration

[settings]
# Enable experimental features
experimental = true

# Always keep downloaded files (saves bandwidth)
always_keep_download = true

# Use all CPU cores for compilation
jobs = 0

# Enable progress bars
quiet = false

# Use system curl/wget if available
http_timeout = "30s"

# Plugin management
plugin_autoupdate_last_check_duration = "7d"
trusted_config_paths = [
    "~/dotfiles",
    "~/projects",
    "~/.config"
]

# Legacy version files support
legacy_version_file = true
legacy_version_file_disable_tools = []

# Task configuration  
task_output = "prefix"

# Status configuration
status = {
    missing_tools = "if_other_versions_installed",
    show_env = true,
    show_tools = true
}

# Environment variables
[env]
# Set NODE_ENV for all Node.js projects
NODE_ENV = "development"

# Python settings (using uv instead of pip)
PYTHONPATH = ""
UV_PYTHON_PREFERENCE = "managed"  # Use uv-managed Python installations
UV_PROJECT_ENVIRONMENT = ".venv"   # Default virtual environment location
UV_INDEX_STRATEGY = "unsafe-best-match"  # Faster dependency resolution

# Go settings
GOPROXY = "https://proxy.golang.org,direct"
GOSUMDB = "sum.golang.org"

# Rust settings
CARGO_HOME = "~/.cargo"
RUSTUP_HOME = "~/.rustup"

# Java/JVM settings (for Kotlin, Clojure, etc.)
# JAVA_HOME is automatically set by mise based on active version
JAVA_TOOL_OPTIONS = "-XX:+UseG1GC -XX:MaxRAMPercentage=75"

# .NET Core settings
# DOTNET_ROOT is automatically set by mise based on active version
DOTNET_CLI_TELEMETRY_OPTOUT = "1"
DOTNET_NOLOGO = "1"

# Kotlin settings
# KOTLIN_HOME is automatically set by mise based on active version

# Clojure settings
# CLOJURE_HOME is automatically set by mise based on active version

# Elixir settings
ERL_AFLAGS = "-kernel shell_history enabled"
ELIXIR_ERL_OPTIONS = "+fnu"

# Kubernetes settings
KUBECONFIG = "~/.kube/config"
HELM_CACHE_HOME = "~/.cache/helm"
HELM_CONFIG_HOME = "~/.config/helm"
HELM_DATA_HOME = "~/.local/share/helm"

# uv settings and PATH
UV_TOOL_BIN_DIR = "~/.local/bin"  # Where uv installs global tools
_.path = ["~/.local/bin"]          # Add uv tools to PATH

# Default tools to install globally
[tools]
# Latest LTS versions by default
node = "lts"          # For TypeScript/Angular/JavaScript development (ts_ls, angularls)
python = "3.12"       # For Python development and tooling
go = "latest"         # For Go development (gopls)
rust = "stable"       # For Rust development and tooling

# Languages with LSP servers in Neovim config
java = "21"           # For Kotlin development (kotlin_language_server, requires JVM)
elixir = "1.16"       # For Elixir development (elixirls) 
erlang = "26"         # Required by Elixir runtime
clojure = "latest"    # For Clojure development (clojure_lsp)
dotnet = "8.0"        # For C# development (roslyn LSP)
kotlin = "2.0"        # For Kotlin development (kotlin_language_server)

# Additional development tools
bun = "latest"        # Alternative Node.js runtime
deno = "latest"       # Alternative TypeScript/JavaScript runtime
zig = "latest"        # Systems programming language
terraform = "latest"  # Infrastructure as code
kubectl = "latest"    # Kubernetes CLI
helm = "latest"       # Kubernetes package manager
uv = "latest"         # Fast Python package manager (replaces pip)

[tasks.update]
description = "Update all tools to latest versions"
run = "mise upgrade"

[tasks.doctor]
description = "Check mise configuration and environment"
run = "mise doctor"

[tasks.clean]
description = "Clean up unused tool versions"
run = "mise prune --yes"

# Language-specific tasks
[tasks.kotlin-build]
description = "Build Kotlin project using Gradle or Maven"
run = '''
if [ -f "build.gradle.kts" ] || [ -f "build.gradle" ]; then
  ./gradlew build
elif [ -f "pom.xml" ]; then
  mvn compile
else
  echo "No Kotlin build file found (build.gradle.kts, build.gradle, or pom.xml)"
  exit 1
fi
'''

[tasks.kotlin-test]
description = "Run Kotlin tests"
run = '''
if [ -f "build.gradle.kts" ] || [ -f "build.gradle" ]; then
  ./gradlew test
elif [ -f "pom.xml" ]; then
  mvn test
else
  echo "No Kotlin build file found"
  exit 1
fi
'''

[tasks.elixir-deps]
description = "Install Elixir dependencies"
run = "mix deps.get"

[tasks.elixir-test]
description = "Run Elixir tests"
run = "mix test"

[tasks.elixir-format]
description = "Format Elixir code"
run = "mix format"

[tasks.clojure-deps]
description = "Install Clojure dependencies"
run = "lein deps"

[tasks.clojure-test]
description = "Run Clojure tests"
run = "lein test"

[tasks.dotnet-restore]
description = "Restore .NET dependencies"
run = "dotnet restore"

[tasks.dotnet-build]
description = "Build .NET project"
run = "dotnet build"

[tasks.dotnet-test]
description = "Run .NET tests"
run = "dotnet test"

[tasks.go-mod]
description = "Initialize or update Go module"
run = "go mod tidy"

[tasks.go-test]
description = "Run Go tests"
run = "go test ./..."

[tasks.node-install]
description = "Install Node.js dependencies"
run = "npm install"

[tasks.node-test]
description = "Run Node.js tests"
run = "npm test"

# Python tasks using uv
[tasks.python-install]
description = "Install Python dependencies using uv"
run = "uv sync"

[tasks.python-add]
description = "Add Python package using uv"
run = "uv add $@"

[tasks.python-dev-add]
description = "Add Python development dependency using uv"
run = "uv add --dev $@"

[tasks.python-run]
description = "Run Python script in uv environment"
run = "uv run $@"

[tasks.python-shell]
description = "Start Python shell in uv environment"
run = "uv run python"

[tasks.python-test]
description = "Run Python tests using pytest"
run = "uv run pytest"

[tasks.python-format]
description = "Format Python code using ruff"
run = "uv run ruff format ."

[tasks.python-lint]
description = "Lint Python code using ruff"
run = "uv run ruff check ."

[tasks.python-type-check]
description = "Type check Python code using mypy"
run = "uv run mypy ."

[tasks.python-init]
description = "Initialize new Python project with uv"
run = '''
echo "Initializing Python project with uv..."
uv init

# Add common development dependencies
uv add --dev pytest pytest-cov black ruff mypy isort

echo "Python project initialized with:"
echo "  - pytest (testing)"
echo "  - ruff (linting/formatting)"
echo "  - mypy (type checking)"
echo "  - black (formatting fallback)"
echo "  - isort (import sorting)"

echo ""
echo "Next steps:"
echo "  - Add dependencies: uv add <package>"
echo "  - Run tests: uv run pytest"
echo "  - Format code: uv run ruff format ."
echo "  - Lint code: uv run ruff check ."
echo "  - Type check: uv run mypy ."
'''

[tasks.setup-lsp]
description = "Install all language servers and tools"
run = '''
echo "Setting up language servers and development tools..."

# Install Node.js tools globally
npm install -g typescript @angular/cli @angular/language-server typescript-language-server

# Install Python tools using uv
uv tool install python-lsp-server
uv tool install ruff
uv tool install mypy
uv tool install black
uv tool install isort
uv tool install pylsp-mypy
uv tool install python-lsp-ruff

# Install Go tools  
go install golang.org/x/tools/gopls@latest
go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
go install honnef.co/go/tools/cmd/staticcheck@latest

# Install Rust tools
rustup component add rust-analyzer rustfmt clippy

echo "Language servers setup complete!"
echo "Run 'mise doctor' to verify installation"
echo "Python tools installed globally with 'uv tool'"
'''

# Plugin settings
[plugins]
# Use specific plugin repositories or settings if needed
